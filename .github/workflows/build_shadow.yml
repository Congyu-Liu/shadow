# Syntax reference:
# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions

name: Tests

on:
  push:
    branches: [master, 'rebases/**']
    paths-ignore:
      - '**.md'
      - 'LICENSE'
  pull_request:
    types: [opened, synchronize]

jobs:
  testing:
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.container }}
      # the default for ubuntu:18.04, but with noexec replaced by exec and
      # the size increased from 65536k
      options: '--tmpfs /dev/shm:rw,nosuid,nodev,exec,relatime,size=1g'
    strategy:
      matrix:
        container: ['ubuntu:18.04', 'ubuntu:20.04', 'debian:10-slim', 'fedora:32']
        cc: ['gcc', 'clang']
        buildtype: ['debug', 'release']
        include:
          - container: 'ubuntu:18.04'
            package_manager: 'apt'
          - container: 'ubuntu:20.04'
            package_manager: 'apt'
          - container: 'debian:10-slim'
            package_manager: 'apt'
          - container: 'fedora:32'
            package_manager: 'dnf'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Dependencies (apt)
        if: ${{ matrix.package_manager == 'apt' }}
        env:
          # prevent prompts for user input during package install
          DEBIAN_FRONTEND: 'noninteractive'
        run: |
          apt-get update
          apt-get install -y ${{ matrix.cc }} g++ cmake make xz-utils python libglib2.0-0 libglib2.0-dev libigraph0v5 libigraph0-dev libc-dbg python-pyelftools libprocps-dev

      - name: Install Dependencies (dnf)
        if: ${{ matrix.package_manager == 'dnf' }}
        run: dnf install --best -y ${{ matrix.cc }} cmake make gcc-c++ glib2 glib2-devel igraph igraph-devel python python-pyelftools xz xz-devel yum-utils procps-devel

      - name: Build Debug
        if: ${{ matrix.buildtype == 'debug' }}
        run: CC=${{ matrix.cc }} python setup build --clean --test --werror --debug

      - name: Build Release
        if: ${{ matrix.buildtype == 'release' }}
        run: CC=${{ matrix.cc }} python setup build --clean --test --werror

      - name: Install
        run: python setup install

      - name: Test
        # For now, if the first batch of tests fails, rerun the failing tests
        # and continue on if they then pass. This is to work around sporadic
        # and difficult to debug errors such as #798
        run: python setup test || python setup test --rerun-failed

      - name: Upload shadow data directories
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: shadow-data-dirs
          path: build/**/*.data/*

      - name: Upload shadow log file
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: shadow-log-file
          path: build/Testing/Temporary/*

# FIXME
#  shadow-plugin-tor-ci:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        # TODO: add clang. Currently builds but has unsuccessful xfers in simulation.
#        cc: ['gcc']
#
#    env:
#      CC: ${{ matrix.cc }}
#
#    steps:
#      - name: Update packages
#        run: sudo apt-get update
#
#      - name: Checkout shadow
#        uses: actions/checkout@v2
#        with:
#          path: shadow
#
#      - name: Checkout tgen 
#        uses: actions/checkout@v2
#        with:
#          repository: shadow/tgen
#          ref: v0.0.1
#          path: tgen
#
#      - name: Checkout shadow-plugin-tor
#        uses: actions/checkout@v2
#        with:
#          repository: shadow/shadow-plugin-tor
#          ref: 391f85f26bcaf09dd6b9f06f7331b6b73b47db17
#          path: shadow-plugin-tor
#
#      - name: CI script
#        run: shadow-plugin-tor/tools/continuous_integration_test.sh
#
#      - name: Upload simulation logs
#        uses: actions/upload-artifact@v2
#        if: failure()
#        with:
#          name: simulation-output
#          path: simulation

